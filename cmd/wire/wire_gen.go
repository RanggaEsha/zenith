// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/arifai/zenith/config"
	"github.com/arifai/zenith/internal/handler"
	"github.com/arifai/zenith/internal/middleware"
	"github.com/arifai/zenith/internal/repository"
	"github.com/arifai/zenith/internal/service"
	"github.com/arifai/zenith/pkg/api"
	"github.com/arifai/zenith/pkg/common"
	"github.com/gin-gonic/gin"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeResponse is a provider function that sets up and returns a new instance of common.Response using dependency injection.
func InitializeResponse() *common.Response {
	response := common.NewResponse()
	return response
}

// InitializeRepository sets up a new instance of repository.Repository using the provided database and redis clients.
func InitializeRepository(db *gorm.DB, redis2 *redis.Client) *repository.Repository {
	repositoryRepository := repository.New(db, redis2)
	return repositoryRepository
}

// InitializeAccountRepository initializes and returns an AccountRepository implementation.
// It uses the provided gorm.DB and redis.Client for database and caching operations.
func InitializeAccountRepository(db *gorm.DB, redis2 *redis.Client) repository.AccountRepository {
	repositoryRepository := repository.New(db, redis2)
	accountRepository := repository.NewAccountRepository(repositoryRepository)
	return accountRepository
}

// InitializeService initializes a new service instance using the provided database connection, Redis client, and configuration settings.
func InitializeService(db *gorm.DB, redis2 *redis.Client, cfg *config.Config) *service.Service {
	serviceService := service.New(db, redis2, cfg)
	return serviceService
}

// InitializeAccountService sets up the AccountService by wiring dependencies including database, redis, and configuration.
func InitializeAccountService(db *gorm.DB, redis2 *redis.Client, cfg *config.Config) service.AccountService {
	serviceService := service.New(db, redis2, cfg)
	repositoryRepository := repository.New(db, redis2)
	accountRepository := repository.NewAccountRepository(repositoryRepository)
	accountService := service.NewAccountService(serviceService, accountRepository)
	return accountService
}

// InitializeHandler sets up and returns a new handler.Handler instance using dependency injection.
func InitializeHandler() *handler.Handler {
	response := InitializeResponse()
	handlerHandler := handler.New(response)
	return handlerHandler
}

// InitializeAccountHandler initializes and returns a new AccountHandler by setting up necessary dependencies using wire.
func InitializeAccountHandler(db *gorm.DB, redis2 *redis.Client, cfg *config.Config) *handler.AccountHandler {
	response := InitializeResponse()
	handlerHandler := handler.New(response)
	serviceService := service.New(db, redis2, cfg)
	repositoryRepository := InitializeRepository(db, redis2)
	accountRepository := repository.NewAccountRepository(repositoryRepository)
	accountService := service.NewAccountService(serviceService, accountRepository)
	accountHandler := handler.NewAccountHandler(handlerHandler, accountService)
	return accountHandler
}

// InitializeMiddleware initializes and returns a new middleware with the provided database and Redis client.
func InitializeMiddleware(db *gorm.DB, redis2 *redis.Client) *middleware.Middleware {
	middlewareMiddleware := middleware.New(db, redis2)
	return middlewareMiddleware
}

// InitializeStrictAuthMiddleware sets up and returns a new instance of StrictAuthMiddleware using the provided database and Redis clients.
func InitializeStrictAuthMiddleware(db *gorm.DB, redis2 *redis.Client) *middleware.StrictAuthMiddleware {
	middlewareMiddleware := middleware.New(db, redis2)
	strictAuthMiddleware := middleware.NewStrictAuthMiddleware(middlewareMiddleware)
	return strictAuthMiddleware
}

// InitializeRouter sets up the Gin router with handlers and middleware for the account service.
func InitializeRouter(db *gorm.DB, redis2 *redis.Client, cfg *config.Config) *gin.Engine {
	accountHandler := InitializeAccountHandler(db, redis2, cfg)
	strictAuthMiddleware := InitializeStrictAuthMiddleware(db, redis2)
	engine := InitializeGinEngine(accountHandler, strictAuthMiddleware)
	return engine
}

// wire.go:

// InitializeGinEngine sets up and returns a new Gin engine with routes and middleware for account handling.
func InitializeGinEngine(accountHandler *handler.AccountHandler, strictAuthMiddleware *middleware.StrictAuthMiddleware) *gin.Engine {
	engine := gin.Default()
	api.SetupRouter(engine, accountHandler, strictAuthMiddleware)
	return engine
}
